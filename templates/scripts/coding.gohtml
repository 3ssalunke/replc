{{define "codingjsscript"}}
    <script>
        // Util functions
        function buildFileTree(data) {
            const dirs = data.filter(x => x.type === "dir");
            const files = data.filter(x => x.type === "file");
            const cache = new Map();
  
            let rootDir = {
                id: "root",
                name: "root",
                parentId: undefined,
                type: "DIRECTORY",
                path: "",
                depth: 0,
                dirs: [],
                files: []
            };
  
            dirs.forEach((item) => {
                let dir = {
                    id: item.path,
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "DIRECTORY",
                    depth: 0,
                    dirs: [],
                    files: []
                };
                cache.set(dir.id, dir);
            });
  
            files.forEach((item) => {
                let file = {
                    id: item.path,
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "FILE",
                    depth: 0
                };
                cache.set(file.id, file);
            });

            cache.forEach((value, key) => {
                if (value.parentId === "0") {
                    if (value.type === "DIRECTORY") rootDir.dirs.push(value);
                    else rootDir.files.push(value);
                } else {
                    const parentDir = cache.get(value.parentId);
                    if (value.type === "DIRECTORY") parentDir.dirs.push(value);
                    else parentDir.files.push(value);
                }
            });

            getDepth(rootDir, 0);

            return rootDir;
        }

        function getDepth(rootDir, curDepth) {
            rootDir.files.forEach((file) => {
                file.depth = curDepth + 1;
            });
            rootDir.dirs.forEach((dir) => {
                dir.depth = curDepth + 1;
                getDepth(dir, curDepth + 1);
            });
        }

        function fileLangauge(filename){
            let language = filename.split('.').pop();

            if (language === "js") language = "javascript";
            else if (language === "ts") language = "typescript";
            else if (language === "py") language = "python";

            return language;
        }

        function debounce(func, wait){
            let timeout;
            return () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func()
                }, wait)
            }
        }

        // Socket communication
        const newSocket = io('ws://{{.Data.ReplId}}.replc.com');
        let rootDir;
        let selectedFile;

        // Listen to loaded event from ws server
        newSocket.on("loaded", ({rootContent}) => {
            console.log("rootContent", rootContent)
            // Set fileStructure
            rootDir = buildFileTree(rootContent);
            console.log("rootDir", rootDir)

            // Create file explorer
            rootDir.files.forEach(file => {
                const listItem = document.createElement('li');
                listItem.classList.add('p-1', 'hover:cursor-pointer', 'hover:bg-gray-600');

                // Add icon
                const icon = document.createElement('i');
                icon.classList.add('far', 'fa-file', 'mx-2');

                listItem.appendChild(icon);

                const fileName = document.createTextNode(file.name);
                listItem.appendChild(fileName);

                listItem.onclick = function() {
                    // Remove background color from previously selected item
                    const prevSelectedItem = document.querySelector('.selected');
                    if (prevSelectedItem) {
                        prevSelectedItem.classList.remove('selected', 'bg-blue-500');
                    }

                    // Add background color to the clicked item
                    listItem.classList.add('selected', 'bg-blue-500');
                };

                document.getElementById('fileExplorer').appendChild(listItem);
            });
            rootDir.dirs.forEach(dir => {
                const listItem = document.createElement('li');
                listItem.classList.add('p-1', 'hover:cursor-pointer', 'hover:bg-gray-600');

                // Add icon
                const icon = document.createElement('i');
                icon.classList.add('fas', 'fa-folder', 'mx-2');
                // Add expand/shrink icon for folders
                icon.classList.add('folder-icon');

                listItem.appendChild(icon);

                const folderName = document.createTextNode(dir.name);
                listItem.appendChild(folderName);

                listItem.onclick = function() {
                    // Remove background color from previously selected item
                    const prevSelectedItem = document.querySelector('.selected');
                    if (prevSelectedItem) {
                        prevSelectedItem.classList.remove('selected', 'bg-blue-500');
                    }

                    // Add background color to the clicked item
                    listItem.classList.add('selected', 'bg-blue-500');
                };

                document.getElementById('fileExplorer').appendChild(listItem);
            });

            // Fetch content for file
            let i = rootDir.files.findIndex(file => file.name === "test.js")
            newSocket.emit("fetchContent", { path: rootDir.files[i].path }, (data) => {
                console.log("fileContent", data)
                rootDir.files[i].content = data;
                selectedFile = rootDir.files[i];
            });

            // Initialize Monaco Editor
            require.config({paths: {'vs':'https://cdn.jsdelivr.net/npm/monaco-editor@latest/min/vs'} });
            
            require(['vs/editor/editor.main'], function() {
                var editor = monaco.editor.create(document.getElementById('ide-editor'), {
                    value: selectedFile.content,
                    language: fileLangauge(selectedFile.name)
                });
                
                editor.onDidChangeModelContent(debounce(() => {
                    console.log('Editor content changed:', selectedFile.path, editor.getValue());
                    newSocket.emit("updateContent", { path: selectedFile.path, content: editor.getValue() });
                }, 1000));
            });

            // Toggle loader and ide views
            document.getElementById('ide-loader').style.display = 'none';
            document.getElementById('ide-screen').style.display = 'block';
        });
    </script>
{{end}}