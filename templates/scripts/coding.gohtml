{{define "codingjsscript"}}
    <script>
        // ------------- Start util functions --------------
        function buildFileTree(data) {
            const dirs = data.filter(x => x.type === "dir");
            const files = data.filter(x => x.type === "file");
            const cache = new Map();
  
            let rootDir = {
                id: "root",
                name: "root",
                parentId: undefined,
                type: "DIRECTORY",
                path: "",
                depth: 0,
                dirs: [],
                files: []
            };
  
            dirs.forEach((item) => {
                let dir = {
                    id: item.path,
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "DIRECTORY",
                    depth: 0,
                    dirs: [],
                    files: []
                };
                cache.set(dir.id, dir);
            });
  
            files.forEach((item) => {
                let file = {
                    id: item.path,
                    class: getRandomSlug(),
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "FILE",
                    depth: 0
                };
                cache.set(file.id, file);
            });

            cache.forEach((value, key) => {
                if (value.parentId === "0") {
                    if (value.type === "DIRECTORY") rootDir.dirs.push(value);
                    else rootDir.files.push(value);
                } else {
                    const parentDir = cache.get(value.parentId);
                    if (value.type === "DIRECTORY") parentDir.dirs.push(value);
                    else parentDir.files.push(value);
                }
            });

            getDepth(rootDir, 0);

            return rootDir;
        }

        function getDepth(rootDir, curDepth) {
            rootDir.files.forEach((file) => {
                file.depth = curDepth + 1;
            });
            rootDir.dirs.forEach((dir) => {
                dir.depth = curDepth + 1;
                getDepth(dir, curDepth + 1);
            });
        }

        function fileLangauge(filename){
            let language = filename.split('.').pop();

            if (language === "js") language = "javascript";
            else if (language === "ts") language = "typescript";
            else if (language === "py") language = "python";

            return language;
        }

        function debounce(func, wait){
            let timeout;
            return () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func()
                }, wait)
            }
        }

        function createFileTree(rootDir, rootEle){
            // Iterate rootDir files and create li element for each file
            rootDir.files.forEach((file, index) => {
                // Create li element in file explorer ul
                const feListItem = document.createElement('li');
                document.getElementById(rootEle).appendChild(feListItem);
                feListItem.classList.add('p-1', 'hover:cursor-pointer', 'hover:bg-gray-600');

                // Add file icon
                const icon = document.createElement('i');
                icon.classList.add('far', 'fa-file', 'mx-2');
                feListItem.appendChild(icon);

                // Add file name
                const fileName = document.createTextNode(file.name);
                feListItem.appendChild(fileName);

                // Attach onclick event to li element
                feListItem.onclick = function() {
                    // Remove background color from previously selected item
                    const prevSelectedItem = document.querySelector('.selected');
                    if (prevSelectedItem) {
                        prevSelectedItem.classList.remove('selected', 'bg-blue-500');
                    }

                    // Add background color to the clicked item
                    this.classList.add('selected', 'bg-blue-500');

                    // Check if this file is opened before
                    const prevOpenedFile = document.querySelector(`.${file.class}`)
                    console.log("prevOpenedFile", file.class, prevOpenedFile)
                    if(!prevOpenedFile){
                        // Create li element in opened file ul
                        const vfListItem = document.createElement('li');
                        document.getElementById("visited-files").appendChild(vfListItem);
                        vfListItem.classList.add('p-1', 'hover:cursor-pointer', file.class);

                        // Add file name
                        const fileName = document.createTextNode(file.name);
                        vfListItem.appendChild(fileName);

                        // Add close icon
                        const icon = document.createElement('i');
                        icon.classList.add('fa', 'fa-times', 'mx-2');
                        vfListItem.appendChild(icon);
                    }

                    // Fetch content for file
                    newSocket.emit("fetchContent", { path: file.path }, (data) => {
                        rootDir.files[index].content = data;

                        // Create editor element in editor tabs section
                        const prevOpenedEditorTab = document.querySelector('.open-editor');
                        if (prevOpenedEditorTab) {
                            prevOpenedEditorTab.remove();
                        }
                        const editorTab = document.createElement('div');
                        editorTab.classList.add('open-editor');
                        editorTab.style = "width:100%; height:95%"
                        document.getElementById("ide-editor-tabs").appendChild(editorTab);

                        require(['vs/editor/editor.main'], function() {
                            const editor = monaco.editor.create(editorTab, {
                                value: data,
                                language: fileLangauge(file.name)
                            });

                            editor.onDidChangeModelContent(debounce(() => {
                                newSocket.emit("updateContent", { path: file.path, content: editor.getValue() });
                            }, 1000));
                        });
                    });
                };
            });
            // Iterate rootDir dirs and create li element for each dir
            rootDir.dirs.forEach(dir => {
                const feListItem = document.createElement('li');
                document.getElementById(rootEle).appendChild(feListItem);
                feListItem.classList.add('p-1', 'hover:cursor-pointer', 'hover:bg-gray-600');

                // Add icon
                const icon = document.createElement('i');
                icon.classList.add('fas', 'fa-folder', 'mx-2');
                // Add expand/shrink icon for folders
                icon.classList.add('folder-icon');

                feListItem.appendChild(icon);

                const folderName = document.createTextNode(dir.name);
                feListItem.appendChild(folderName);

                feListItem.onclick = function() {
                    // Remove background color from previously selected item
                    const prevSelectedItem = document.querySelector('.selected');
                    if (prevSelectedItem) {
                        prevSelectedItem.classList.remove('selected', 'bg-blue-500');
                    }

                    // Add background color to the clicked item
                    this.classList.add('selected', 'bg-blue-500');
                };
            });
        }
        // ------------- End util functions --------------

        // Socket communication
        const newSocket = io('ws://{{.Data.ReplId}}.replc.com');

        // Initialize Monaco Editor
        require.config({paths: {'vs':'https://cdn.jsdelivr.net/npm/monaco-editor@latest/min/vs'} });

        // Listen to loaded event from ws server
        newSocket.on("loaded", ({rootContent}) => {
            // Create root dir
            rootDir = buildFileTree(rootContent);
            console.log("rootDir", rootDir)

            // Create file explorer
            createFileTree(rootDir, "file-explorer")

            // Toggle loader and ide views
            document.getElementById('ide-loader').style.display = 'none';
            document.getElementById('ide-screen').style.display = 'block';
        });
    </script>
{{end}}