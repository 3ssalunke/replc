{{define "codingjsscript_gows"}}
    <script>
        // ------------- Start util functions --------------
        function buildFileTree(data) {
            const dirs = data.filter(x => x.type === "dir");
            const files = data.filter(x => x.type === "file");
            const cache = new Map();
  
            let rootDir = {
                id: "root",
                name: "root",
                parentId: undefined,
                type: "DIRECTORY",
                path: "",
                depth: 0,
                dirs: [],
                files: []
            };
  
            dirs.forEach((item) => {
                let dir = {
                    id: item.path,
                    class: getRandomSlug(),
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "DIRECTORY",
                    depth: 0,
                    dirs: [],
                    files: []
                };
                cache.set(dir.id, dir);
            });
  
            files.forEach((item) => {
                let file = {
                    id: item.path,
                    class: getRandomSlug(),
                    name: item.name,
                    path: item.path,
                    parentId: item.path.split("/").length === 2 ? "0" : dirs.find(x => x.path === item.path.split("/").slice(0, -1).join("/"))?.path,
                    type: "FILE",
                    depth: 0
                };
                cache.set(file.id, file);
            });

            cache.forEach((value, key) => {
                if (value.parentId === "0") {
                    if (value.type === "DIRECTORY") rootDir.dirs.push(value);
                    else rootDir.files.push(value);
                } else {
                    const parentDir = cache.get(value.parentId);
                    if (value.type === "DIRECTORY") parentDir.dirs.push(value);
                    else parentDir.files.push(value);
                }
            });

            getDepth(rootDir, 0);

            return rootDir;
        }

        function getDepth(rootDir, curDepth) {
            rootDir.files.forEach((file) => {
                file.depth = curDepth + 1;
            });
            rootDir.dirs.forEach((dir) => {
                dir.depth = curDepth + 1;
                getDepth(dir, curDepth + 1);
            });
        }

        function sortDirContent(rootDir){
            const compareFunction = (a, b) => b.name.localeCompare(a.name);
            rootDir.files.sort(compareFunction);
            rootDir.dirs.sort(compareFunction);
            rootDir.dirs.forEach(dir => sortDirContent(dir));
        }

        function fileLangauge(filename){
            let language = filename.split('.').pop();

            if (language === "js") language = "javascript";
            else if (language === "ts") language = "typescript";
            else if (language === "py") language = "python";

            return language;
        }

        function debounce(func, wait){
            let timeout;
            return () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func();
                }, wait)
            }
        }

        function fetchFileContentAndCreateEditor(rootDir, file, index){
            socket.emit("fetchContent", { path: file.path }, (data) => {
                rootDir.files[index].content = data;

                // Create editor element in editor tabs section
                const prevOpenedEditorTab = document.querySelector('.open-editor');
                if (prevOpenedEditorTab) {
                    prevOpenedEditorTab.remove();
                }
                const editorTab = document.createElement('div');
                editorTab.classList.add('open-editor');
                editorTab.style = "width:100%; height:95%";
                document.getElementById("ide-editor-tabs").appendChild(editorTab);

                require(['vs/editor/editor.main'], function() {
                    const editor = monaco.editor.create(editorTab, {
                        value: data,
                        language: fileLangauge(file.name)
                    });

                    editor.onDidChangeModelContent(debounce(() => {
                        socket.emit("updateContent", { path: file.path, content: editor.getValue() });
                    }, 1000));
                });
            });
        }

        function removeExplorerAndTabSelectionStyles(){
            // Remove select styles from previously selected item in file explorer
            const prevSelectedItem = document.querySelector('.fe-selected');
            if (prevSelectedItem) {
                prevSelectedItem.classList.remove('fe-selected', 'bg-blue-500');
            }
            // Remove opened tab styles from previously opened file tab
            const prevOpenedFileTab = document.querySelector('.opened-tab');
            if (prevOpenedFileTab) {
                prevOpenedFileTab.classList.remove('opened-tab', 'bg-blue-200');
            }
        }

        function getChildDirBasedOnPath(dir, path){
            if(!dir.dirs.length) return null;
            for(let _dir of dir.dirs){
                if(_dir.path === path) return _dir;
                if(_dir.dirs){
                    const foundDir = getChildDirBasedOnPath(_dir, path);
                    if(foundDir) return foundDir;
                }
            }
            return null;
        }

        function createFileTree(socket, rootDir, fileStructure, rootEleSelector){
            // Iterate rootDir dirs and create li element for each dir
            if(rootDir?.dirs.length){
                rootDir.dirs.forEach(dir => {
                    const feListItem = document.createElement('li');
                    document.querySelector(rootEleSelector).appendChild(feListItem);
                    feListItem.classList.add(dir.class, 'py-1', 'px-2', 'hover:cursor-pointer', 'hover:bg-gray-600');

                    // Add icon
                    const icon = document.createElement('i');
                    icon.classList.add('fas', 'fa-folder', 'mx-2');
                    // Add expand/shrink icon for folders
                    // TODO

                    feListItem.appendChild(icon);

                    const folderName = document.createTextNode(dir.name);
                    feListItem.appendChild(folderName);

                    feListItem.onclick = function(e) {
                        e.stopPropagation();
                        // Remove background color from previously selected item
                        const prevSelectedItem = document.querySelector('.fe-selected');
                        if (prevSelectedItem) {
                            prevSelectedItem.classList.remove('fe-selected', 'bg-blue-500');
                        }

                        // Add background color to the clicked item
                        this.classList.add('fe-selected', 'bg-blue-500');

                        // Fetch dir content
                        socket?.emit("fetchDir", { dir: dir.path }, (data) => {
                            const _fileStructure = [...fileStructure, ...data]
                            const fileTree = buildFileTree(_fileStructure)
                            const _rootDir = getChildDirBasedOnPath(fileTree, dir.path);
                            createFileTree(socket, _rootDir, _fileStructure, `.${dir.class}`)
                        });
                    };
                });
            }
            
            // Iterate rootDir files and create li element for each file
            if(rootDir?.files.length){
                rootDir.files.forEach((file, index) => {
                    // Create li element in file explorer ul
                    const feListItem = document.createElement('li');
                    document.querySelector(rootEleSelector).appendChild(feListItem);
                    feListItem.classList.add('py-1', 'px-2', 'hover:cursor-pointer', 'hover:bg-gray-600');

                    // Add file icon
                    const icon = document.createElement('i');
                    icon.classList.add('far', 'fa-file', 'mx-2');
                    feListItem.appendChild(icon);

                    // Add file name
                    const fileName = document.createTextNode(file.name);
                    feListItem.appendChild(fileName);

                    // Attach onclick event to file explorer li element
                    feListItem.onclick = function(e) {
                        e.stopPropagation();
                        removeExplorerAndTabSelectionStyles();

                        // Add background color to the clicked explorer li item
                        this.classList.add('fe-selected', 'bg-blue-500');

                        // Check if this file is opened before
                        const prevOpenedFile = document.querySelector(`.${file.class}`);
                        if(prevOpenedFile){
                            // Add background color to opened file tab li item
                            prevOpenedFile.classList.add('opened-tab', 'bg-blue-200');
                        } else {
                            // Create li element in opened file tabs ul
                            const vfListItem = document.createElement('li');
                            document.getElementById("visited-files").appendChild(vfListItem);
                            vfListItem.classList.add('p-1', 'border-r-2', 'hover:cursor-pointer', 'opened-tab', 'bg-blue-200', file.class);

                            // Attach onclick event to open file tab li item
                            vfListItem.onclick = function(){
                                // Fetch content for file and create editor instance
                                fetchFileContentAndCreateEditor(rootDir, file, index);

                                removeExplorerAndTabSelectionStyles();

                                // Add selection styles to explorer and open tabs items
                                feListItem.classList.add('fe-selected', 'bg-blue-500');
                                this.classList.add('opened-tab', 'bg-blue-200');
                            }

                            // Add file name
                            const fileName = document.createTextNode(file.name);
                            vfListItem.appendChild(fileName);

                            // Add close icon
                            const icon = document.createElement('i');
                            icon.classList.add('fa', 'fa-times', 'mx-2');
                            vfListItem.appendChild(icon);
                        }

                        // Fetch content for file and create editor instance
                        fetchFileContentAndCreateEditor(rootDir, file, index);
                    };
                });
            }
        }

        function ab2str(buf) {
            return String.fromCharCode.apply(null, new Uint8Array(buf));
        }

        function terminalHandler(term) {
            return (data) => {
                term.write("\n" + data);
            };
        }

        function createTerminal(socket){
            const term = new Terminal({
                cursorBlink: true,
                cols: 30,
                useStyle: true,
                screenKeys: true,
            });

            // Load fit addon
            const fitAddon = new FitAddon.FitAddon();
            term.loadAddon(fitAddon);

            // Attach the terminal to the DOM
            term.open(document.getElementById('terminal-container'));
            fitAddon.fit();

            // Request terminal
            socket.emit("terminal", null, terminalHandler(term));

            // Handle user input
            let command = "";
            term.onData((data) => {
                if(data.charCodeAt(0) === 13){
                    socket.emit('terminalData', { content: command });
                    command = "";
                } else if(data.charCodeAt(0) === 127){
                    command = command.slice(0, -1)
                } else {
                    command += data;
                }
            });
        }
        // ------------- End util functions --------------


        // Initialize Monaco Editor
        require.config({paths: {'vs':'https://cdn.jsdelivr.net/npm/monaco-editor@latest/min/vs'} });

        // Socket communication
        const socket = new WebSocket("ws://localhost:3001/ws");
        socket.onopen = function(event) {
            console.log("WebSocket connection established.");
        };

        socket.eventCallbacks = {}

        socket.emit = function(event, input, callback){
            const payload = {event};
            switch(event){
                case "fetchDir":
                    payload.content = input;
                    break;
                case "fetchContent":
                    payload.content = input;
                    break;
                case "updateContent":
                    payload.content = input;
                case "terminal":
                    break;
                case "terminalData":
                    payload.content = input;
                    break;
                default:
                    break;
            }

            if(callback){
                socket.eventCallbacks[event] = callback;
            }

            socket.send(JSON.stringify(payload));
        }

        socket.onmessage = function(event) {
            try{
                const wsData = JSON.parse(event.data);
                if(!wsData.event){
                    throw new Error("invalid data from websocket");
                }
                const wsDataEvent = wsData.event;
                switch(wsDataEvent){
                    case "loaded":
                        // Create root dir
                        const rootDir = buildFileTree(JSON.parse(wsData.content));
                        console.log("rootDir", rootDir);
                        // Create file explorer
                        createFileTree(this, rootDir, JSON.parse(wsData.content), "#file-explorer");
                        // Create terminal
                        createTerminal(this);
                        // Toggle loader and ide views
                        document.getElementById('ide-loader').style.display = 'none';
                        document.getElementById('ide-screen').style.display = 'block';
                        break;
                    case "fetchDir":
                        if(!!this.eventCallbacks[wsDataEvent]){
                            this.eventCallbacks[wsDataEvent](JSON.parse(wsData.content));
                        }
                        break;
                    case "fetchContent":
                        if(!!this.eventCallbacks[wsDataEvent]){
                            this.eventCallbacks[wsDataEvent](wsData.content);
                        }
                        break;
                    case "updateContent":
                        break;
                    case "terminal":
                         if(!!this.eventCallbacks[wsDataEvent]){
                            this.eventCallbacks[wsDataEvent](wsData.content);
                        }
                        break;
                    default:
                        throw new Error("invalid event in data from websocket");
                }
            } catch (error) {
                console.error("error", error.message);
            }
        };
    </script>
{{end}}